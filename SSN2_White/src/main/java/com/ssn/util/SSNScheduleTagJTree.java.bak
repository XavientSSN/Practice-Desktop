/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ssn.util;
import com.ssn.app.loader.SSNConstants;
import com.ssn.schedule.SSNScheduleListForm;
import com.ssn.schedule.SSNScheduleTagController;
import com.ssn.schedule.SSNScheduleTagPanelForm;
import com.ssn.ui.form.SSNHomeForm;
import java.awt.*;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.tree.*;

public class SSNScheduleTagJTree extends JPanel{

    private static final long serialVersionUID = 1L;
    private final JTree tree;
    static JScrollPane pa;
    static JTable table =null;
    boolean showHeading;
    
   

    public SSNScheduleTagJTree(SSNHomeForm homeForm,SSNScheduleTagController sSNScheduleTagController) throws SQLException {
    showHeading=true;
    table= new JTable();
    table.getTableHeader().setReorderingAllowed(true);  
    DefaultMutableTreeNode root =new DefaultMutableTreeNode("root");
    DefaultMutableTreeNode parent=null;
    DefaultMutableTreeNode newChild;
    DefaultMutableTreeNode parentHeading=null;
    Border paddingBorder = BorderFactory.createEmptyBorder(0, 0, 0, 30);
    Border border = BorderFactory.createLineBorder(SSNConstants.SSN_BLACK_BACKGROUND_COLOR);
    
        List<SSNScheduleListForm> parentList=treeParent();
        if(parentList!=null){
//        	 parentHeading= new DefaultMutableTreeNode(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ALBUM+ "`"+ SSNConstants.SSN_SCHEDULAR_TAG_HEAD_TITLE+"`"+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_DATE+ " & "+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME+"`"+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_END_DATE + " & "+ SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME +"`"+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_LOC+"`"+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_KEY+"`"+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_COMMENTS);
                  parentHeading= new DefaultMutableTreeNode(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ALBUM+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + SSNConstants.SSN_SCHEDULAR_TAG_HEAD_TITLE+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_DATE+ " & "+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +SSNConstants.SSN_SCHEDULAR_TAG_HEAD_END_DATE + " & "+ SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME + SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +SSNConstants.SSN_SCHEDULAR_TAG_HEAD_LOC+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + SSNConstants.SSN_SCHEDULAR_TAG_HEAD_KEY);
                                 root.add(parentHeading);
        	for(SSNScheduleListForm item : parentList){
//                         parent=new DefaultMutableTreeNode(""+item.getSsnAlbum()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnTitle()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnStrfromDate()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnStrtoDate()+"`"+item.getSsnLocation()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnkeyWords()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnComent());
                         parent=new DefaultMutableTreeNode(""+item.getSsnAlbum()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnTitle()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnStrfromDate()+"  "+item.getSsnStartTime()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnStrtoDate()+"  "+item.getSsnEndTime()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +item.getSsnLocation()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + item.getSsnkeyWords()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + item.getSsnComent());
      	        	 List<SSNScheduleListForm> childList=treeChild(item.getSsnTitle().trim());
      				 for(SSNScheduleListForm itemChild : childList){
//                                          newChild= new DefaultMutableTreeNode(""+itemChild.getSsnAlbum()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnSubtags()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnStrfromDate()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnStrtoDate()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnLocation()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnkeyWords()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnComent());
                                          newChild= new DefaultMutableTreeNode(""+itemChild.getSsnAlbum()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnSubtags()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnStrfromDate()+"  "+itemChild.getSsnStartTime()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnStrtoDate()+"  "+itemChild.getSsnEndTime()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnLocation()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR +itemChild.getSsnkeyWords()+ SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR + itemChild.getSsnComent());
                                          parent.add(newChild);
                                   }
                                root.add(parent);
         	}
         }
        tree = new JTree(root);
        tree.setRootVisible(false);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
        tree.addTreeSelectionListener(new SelectionListener(sSNScheduleTagController));
        tree.setRowHeight(35);
      	tree.setCellRenderer(new MyTableInTreeCellRenderer(root,parent,homeForm));
        tree.setBackground(SSNConstants.SSN_SCHEDULAR_TBL__DATA_COLOR);
        Border paddingBorder1 = BorderFactory.createEmptyBorder(0,0,0,10);	
	Border border1 = BorderFactory.createLineBorder(SSNConstants.SSN_BLACK_BACKGROUND_COLOR);
        //tree.setBorder(BorderFactory.createCompoundBorder(border1,paddingBorder1));
        //tree.setBorder(new EmptyBorder(0, 0, 0, 5));
        this.setPreferredSize(new Dimension(homeForm.getSsnHomeCenterPanel().getWidth(), homeForm.getSsnHomeCenterPanel().getHeight()/2));
        JScrollPane jsp = new JScrollPane(tree);
        jsp.setBackground(SSNConstants.SSN_BLACK_BACKGROUND_COLOR);
        jsp.setBorder(BorderFactory.createCompoundBorder(border, paddingBorder));
        add(tree, BorderLayout.CENTER);
    }
    
    private static void setWidthAsPercentages(JTable table, SSNHomeForm homeForm,  
        double... percentages) {
        double factor = 0;
        
        int scrWid = homeForm.getSsnHomeCenterPanel().getWidth();
        factor = scrWid;

        TableColumnModel model = table.getColumnModel();
        for (int columnIndex = 0; columnIndex < percentages.length; columnIndex++) {
            int val = (int) (percentages[columnIndex] * factor * 1.0);
            TableColumn column = model.getColumn(columnIndex);
            column.setPreferredWidth(val);
        }
    }
    
    final List<SSNScheduleListForm> treeParent() throws SQLException{
  	  SSNScheduleTagEventListModel eventListModelObj= new SSNScheduleTagEventListModel();
  	  List<SSNScheduleListForm> eventListModelList=eventListModelObj.getParentEventList();
  	  return eventListModelList;
    }
    final List<SSNScheduleListForm> treeChild(String title) throws SQLException{
    	  SSNScheduleTagEventListModel eventListModelObj= new SSNScheduleTagEventListModel();
    	  List<SSNScheduleListForm> eventListModelList=eventListModelObj.getEventListChild(title);
    	  return eventListModelList;
      }

    class MyTableInTreeCellRenderer extends JPanel implements TreeCellRenderer {
        
        private SSNHomeForm homeForm;
        
        TableColumnModel model = table.getColumnModel();
        
        public MyTableInTreeCellRenderer(DefaultMutableTreeNode root,DefaultMutableTreeNode parent,SSNHomeForm form) {
        	
        	super(new GridBagLayout());
                this.homeForm = form;
        }
   
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean selected, boolean expanded, boolean leaf, final int row, boolean hasFocus) {
            
        	String tableData = ((DefaultMutableTreeNode) value).getUserObject().toString();
                
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
                DefaultTableCellRenderer renderer;
                
                renderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
                renderer.setHorizontalAlignment(JLabel.CENTER);
                
                
                if(node.isLeaf()){
                    table.setForeground(SSNConstants.SSN_SCHEDULAR_TREE__LEAF_COLOR);
                }else{
                    table.setForeground(SSNConstants.SSN_SCHEDULAR_TREE__NODE_COLOR);
                }
                
        	final String[] params = tableData.split(SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR);
        	 String[] columnNames = {"A","B","C","D","E","F","G","H"};
               
                table.setRowHeight(35);
                
        	table.setModel(new DefaultTableModel(columnNames,9) {
                private static final long serialVersionUID = 1L;
                @Override
                public int getRowCount() {
                    return 1;
                }

                @Override
                public int getColumnCount() {
                    return params.length;
                }

                @Override
                public Object getValueAt(int row, int column) {
                	if(params[column].equals("root")){
                            //this line has no effect
                             return params[0]="Scheduled a Tag";
                                
                	}else{
                            if(params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ALBUM) 
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_TITLE) 
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_DATE + " & " + SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME )
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_DURA)                                    
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_END_DATE + " & " + SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME)
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_LOC) 
                                    || params[column].equals(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_KEY)
                                    )
                            {
                                table.setBackground(SSNConstants.SSN_SCHEDULAR_TBL_HEADIN_BLACK_BRG_COLOR);
                                table.setForeground(SSNConstants.SSN_SCHEDULAR_TBL_WHITE_HEADIN_FRG_COLOR);
                                
                            }else{
                                table.setBackground(SSNConstants.SSN_SCHEDULAR_TBL__DATA_COLOR);
                            }
                             table.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
                             table.setShowVerticalLines(true);
                             
                       return params[column];
                	}
                }
             
            });
        table.setCellSelectionEnabled(true);   
        table.setFont(new Font("Verdana",Font.BOLD,12));
        for(int i=0;i<model.getColumnCount();i++) {
            if(i == 2 || i == 3) {
                model.getColumn(i).setHeaderValue("20%");
            } else {
                model.getColumn(i).setHeaderValue("10%");
            }
            
        }
        
        setWidthAsPercentages(table,homeForm, 0.10,0.10,0.20,0.20,0.10,0.10);

        TableModel tableModel = table.getModel();         
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ALBUM, 0, 0);
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_TITLE, 0, 1);
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_DATE+ " & "+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME, 0, 2);
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_END_DATE + " & "+ SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME, 0, 3); 
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_LOC, 0, 4);
        tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_KEY, 0, 5);
       // tableModel.setValueAt(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_COMMENTS, 0, 6);
        
        
           return table;
        }
    }
    
}

class SelectionListener implements TreeSelectionListener {    
private SSNScheduleTagController sSNScheduleTagController ;
 
 public SelectionListener(SSNScheduleTagController sSNScheduleTagController) {
     this.sSNScheduleTagController = sSNScheduleTagController;
     setsSNScheduleTagController(this.sSNScheduleTagController);
 }
  @Override
  public void valueChanged(TreeSelectionEvent se) {
    SSNScheduleTagController.preventOverlap = false;
    JTree tree = (JTree) se.getSource();
    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree
        .getLastSelectedPathComponent();
    if(selectedNode!=null){
    //enable action panel
    getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagTitleTxt().setEditable(true);
    getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagTitleTxt().setBackground(Color.white);
    getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagSaveBtn().setText("Save");
    try {
                
                String selectedNodeName = selectedNode.toString();
                SimpleDateFormat sdf = new SimpleDateFormat(SSNConstants.SSN_SCHEDULE_TAG_DATE_PATTERN);
                String nodeItem[] = selectedNodeName.split(SSNConstants.SSN_SCHEDULAR_TAG_SEPERATOR);
                int nodeLength=nodeItem.length;
                for(int ctr=0;ctr<nodeLength;ctr++){
                    if(ctr==0){
                    getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagAlbumCombo().setSelectedItem(nodeItem[ctr]);}
                    else if(ctr==1){
                        getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagTitleTxt().setText(nodeItem[ctr]);
                    }else if(ctr==2){
                        if(!nodeItem[ctr].trim().equalsIgnoreCase(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_DATE+ " & "+SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME)){
                        getsSNScheduleTagController().getScheduleTagPanelFormMerger().getStartDateChooser().setDate(sdf.parse(nodeItem[ctr].trim()));
                        SSNScheduleTagPanelForm.setsDate(sdf.parse(nodeItem[ctr].trim()));
                        String splitedDate[] = (nodeItem[ctr]).split("  ");
                                   
                        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                        getsSNScheduleTagController().getScheduleTagPanelFormMerger().getStartTimeSpinner().setValue(format.parseObject(splitedDate[1].trim()));
                        }
                    }
                    else if(ctr==3){
                        if(!nodeItem[ctr].trim().equalsIgnoreCase(SSNConstants.SSN_SCHEDULAR_TAG_HEAD_END_DATE + " & "+ SSNConstants.SSN_SCHEDULAR_TAG_HEAD_ST_TIME)){
                            getsSNScheduleTagController().getScheduleTagPanelFormMerger().getEndDateChooser().setDate(sdf.parse(nodeItem[ctr].trim()));
                            SSNScheduleTagPanelForm.seteDate(sdf.parse(nodeItem[ctr].trim()));
                            
                            String splitedendDate[] = (nodeItem[ctr]).split("  ");
                            SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                            getsSNScheduleTagController().getScheduleTagPanelFormMerger().getEndTimeSpinner().setValue(format.parseObject(splitedendDate[1].trim()));
                        
                        }
                    }else if(ctr==4){
                        getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagLocationTxt().setText(nodeItem[ctr]);
                    }
                    else if(ctr==5){
                        getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagKeywordTxt().setText(nodeItem[ctr]);
                    }
                    else if(ctr==6){
                       // JViewport viewport = getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnCommentScroll().getViewport(); 
                       // JTextArea commentPane = (JTextArea)viewport.getView();
                        //commentPane.setText(nodeItem[ctr]);
                        //getsSNScheduleTagController().getScheduleTagPanelFormMerger().getSsnScheduleTagCmmnt().setText(nodeItem[ctr]);

                    }
                }
                 if(selectedNode.getLevel()==1){
                    getsSNScheduleTagController().getScheduleTagPanelFormMerger().enableActionPanel(SSNConstants.SSN_SCHEDULAR_PARENT_TAG);
                    SSNScheduleTagPanelForm.setGlobalParentTitleName(nodeItem[1]);
                    SSNScheduleTagPanelForm.setGlobalParentAlbumName(nodeItem[0]);
                    
                }else if (selectedNode.getLevel()==2){
                    getsSNScheduleTagController().getScheduleTagPanelFormMerger().enableActionPanel(SSNConstants.SSN_SCHEDULAR_CHILD_TAG);
                    SSNScheduleTagPanelForm.setGlobalParentTitleName(nodeItem[1]);
                }
                
            } catch (ParseException ex) {
                Logger.getLogger(SelectionListener.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
    }
  }

    /**
     * @return the sSNScheduleTagController
     */
    public SSNScheduleTagController getsSNScheduleTagController() {
        return sSNScheduleTagController;
    }

    /**
     * @param sSNScheduleTagController the sSNScheduleTagController to set
     */
    private void setsSNScheduleTagController(SSNScheduleTagController sSNScheduleTagController) {
        this.sSNScheduleTagController = sSNScheduleTagController;
    }

   
   
}